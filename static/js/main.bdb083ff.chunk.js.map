{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Country/Country.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js","images/covid19.jpg","App.module.css"],"names":["Cards","data","confirmed","deaths","recovered","lastUpdate","className","start","end","value","separator","Date","toDateString","style","color","backgroundColor","borderRadius","url","fetchDailyData","country","a","changeUrl","fetch","resAPI","json","resJSON","console","log","fetchChartData","map","item","total","reportDate","fetchCountries","r","randy","countries","name","Country","selectedItem","useState","setCountries","useEffect","dataCountries","onClick","e","target","id","i","key","Chart","chartData","setChartData","lineChart","length","labels","date","datasets","label","borderColor","fill","barChat","options","legend","display","title","text","App","state","handlePicker","fetchData","setState","this","src","covidLogo","minWidth","maxWidth","height","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.bdb083ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cards.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\r\n\r\n    if (!confirmed) {\r\n        return 'Loading...'\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\"><div className=\"confirmed-container \">\r\n                <h4 className=\"text-center\">Infected</h4>\r\n                <div className=\"text-center counter-infected my-1\">\r\n                    <CountUp start={0} end={confirmed.value} separator=',' />\r\n\r\n                </div>\r\n                <div>\r\n                    <span>{new Date(lastUpdate).toDateString()}</span><br />\r\n                    <span style={{ color: 'black' }}>Number of infected from\r\n            <strong style={{ color: 'red' }} > COVID-19</strong></span>\r\n                </div>\r\n            </div>\r\n                <div className=\"recovered-container \">\r\n                    <h4 className=\"text-center\" style={{ color: 'black', }}>Recovered</h4>\r\n                    <div style={{ backgroundColor: 'brown', borderRadius: '0.3rem' }}\r\n                        className=\"text-center counter-recovered my-1\">\r\n                        <CountUp start={0} end={recovered.value} separator=',' />\r\n                    </div>\r\n                    <div>\r\n                        <span>{new Date(lastUpdate).toDateString()}</span><br />\r\n                        <span style={{ color: 'black' }}>Number of recovered from\r\n            <strong style={{ color: '#00b159 ' }} > COVID-19</strong></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"deaths-container \">\r\n                    <h4 className=\"text-center\" style={{ color: 'black', }}>Deaths</h4>\r\n                    <div className=\"text-center counter-deaths my-1\">\r\n                        <CountUp start={0} end={deaths.value} separator=',' />\r\n\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <span className=\"text-center\">{new Date(lastUpdate).toDateString()}</span><br />\r\n                        <span style={{ color: 'black' }}>Number of deaths from\r\n            <strong style={{ color: '#fe4a49' }} > COVID-19</strong></span>\r\n                    </div>\r\n                </div></div>\r\n\r\n        </div>);\r\n}\r\n\r\nexport default Cards;","\r\nconst url = 'https://covid.mathdro.id/api'\r\n\r\nexport const fetchDailyData = async (country) => {\r\n    let changeUrl = url;\r\n    if (country) { changeUrl = `${url}/countries/${country}`; }\r\n\r\n    try {\r\n\r\n        const resAPI = await fetch(changeUrl);\r\n        const resJSON = await resAPI.json();\r\n\r\n        return resJSON;\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchChartData = async () => {\r\n    try {\r\n        const resAPI = await fetch(`${url}/daily`);\r\n        const resJSON = await resAPI.json();\r\n\r\n        const data = resJSON.map((item) =>\r\n            ({\r\n                confirmed: item.confirmed.total,\r\n                deaths: item.deaths.total,\r\n                lastUpdate: item.reportDate,\r\n            }))\r\n\r\n        return data;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const resAPI = await fetch(`${url}/countries`);\r\n        const resJSON = await resAPI.json();\r\n\r\n        const r = { randy: resJSON.countries }\r\n\r\n        return r.randy.map(item => item.name)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../../api';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Country = ({ selectedItem }) => {\r\n\r\n    const [countries, setCountries] = useState([]);\r\n    useEffect(() => {\r\n\r\n        const dataCountries = async () => {\r\n            setCountries(await fetchCountries());\r\n        }\r\n        dataCountries();\r\n\r\n    }, [setCountries])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <select onClick={(e) => selectedItem(e.target.value)} name=\"\" id=\"\"\r\n                className=\" form-control form-control-sm w-75 mx-auto my-1\">\r\n                <option value=''>Global</option>\r\n                {countries.map((item, i) => <option key={i} value={item}>{item}</option>)}\r\n            </select>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Country;","import React, { useState, useEffect } from 'react';\r\nimport { fetchChartData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport './Chart.css';\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const chartData = async () => {\r\n            setChartData(await fetchChartData())\r\n        }\r\n\r\n        chartData();\r\n\r\n    }, [setChartData])\r\n\r\n    const lineChart = (chartData.length\r\n        ? (<Line\r\n            data={{\r\n                labels: chartData.map(date => date.lastUpdate),\r\n                datasets: [{\r\n                    data: chartData.map(confirmed => confirmed.confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#63ace5',\r\n                    fill: true,\r\n\r\n                },\r\n                {\r\n                    data: chartData.map(deaths => deaths.deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: '#fe4a49',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n\r\n                }]\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    const barChat = (\r\n        confirmed ?\r\n            (<Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n                        data: [confirmed.value, recovered.value, deaths.value],\r\n                    }],\r\n\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ${country}` }\r\n\r\n                }\r\n\r\n                }\r\n\r\n            />) : null\r\n\r\n    );\r\n    return (\r\n        <div className=\"chart-container\">\r\n            {country ? barChat : lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React, { Component } from 'react';\nimport './App.module.css';\nimport Cards from './components/Cards/Cards';\nimport Country from './components/Country/Country';\nimport Chart from './components/Chart/Chart';\nimport { fetchDailyData } from './api';\nimport covidLogo from './images/covid19.jpg';\n\nclass App extends Component {\n  state = {\n    data: '',\n    country: ''\n  }\n\n  async componentDidMount() {\n    const fetchData = await fetchDailyData();\n\n    this.setState({ data: fetchData });\n  }\n\n  handlePicker = async (country) => {\n    const fetchData = await fetchDailyData(country);\n\n    this.setState({ data: fetchData, country: country })\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div>\n        <div className=\"mx-auto justify-content-center text-center my-3 \">\n          <img src={covidLogo} style={{ minWidth: '5rem', maxWidth: '15rem', height: '5rem' }} className=\"card-img\" alt=\"\" />\n        </div>\n        <Cards data={data} />\n        <Country selectedItem={this.handlePicker} />\n        <Chart data={data} country={country} />\n\n      </div>);\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/covid19.ca6e604b.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__EXeJ4\",\"App-logo\":\"App_App-logo__8NRTM\",\"App-logo-spin\":\"App_App-logo-spin__39tlB\",\"App-header\":\"App_App-header__1glf6\",\"App-link\":\"App_App-link__1Cp7J\"};"],"sourceRoot":""}